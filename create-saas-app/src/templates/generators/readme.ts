import { SaasConfig } from '../../utils/prompts';

export function generateReadme(config: SaasConfig): string {
  const projectName = config.name
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');

  let readme = `# ${projectName}

A production-ready SaaS application built with Next.js, generated by [create-saas-app](https://github.com/your-org/create-saas-app).

## ✨ Features

- **Framework**: [Next.js](https://nextjs.org/) ${config.language === 'typescript' ? 'with TypeScript' : 'with JavaScript'}
- **Styling**: ${config.styling === 'tailwind' ? '[Tailwind CSS](https://tailwindcss.com/)' : config.styling}
- **UI Components**: ${config.uiLibrary === 'shadcn' ? '[shadcn/ui](https://ui.shadcn.com/)' : config.uiLibrary}
- **Database**: ${config.database.charAt(0).toUpperCase() + config.database.slice(1)} with [Prisma](https://prisma.io/)
- **Authentication**: ${config.auth === 'nextauth' ? '[NextAuth.js](https://next-auth.js.org/)' : config.auth}
- **Internationalization**: [next-intl](https://next-intl-docs.vercel.app/)`;

  if (config.features.stripe) {
    readme += `
- **Payments**: [Stripe](https://stripe.com/) integration with subscriptions`;
  }

  if (config.features.multiTenant) {
    readme += `
- **Multi-tenancy**: Organizations, teams, and role-based access control`;
  }

  if (config.features.errorTracking) {
    readme += `
- **Error Tracking**: [Sentry](https://sentry.io/) integration`;
  }

  if (config.features.analytics) {
    readme += `
- **Analytics**: [PostHog](https://posthog.com/) integration`;
  }

  readme += `
- **Testing**: [Vitest](https://vitest.dev/) + [Playwright](https://playwright.dev/)
- **Linting**: [ESLint](https://eslint.org/) with Next.js configuration
- **Deployment**: Optimized for ${config.deployment === 'vercel' ? 'Vercel' : config.deployment}

## 🚀 Quick Start

### Prerequisites

- Node.js 18.x or later
- ${config.database === 'postgresql' ? 'PostgreSQL' : config.database === 'mysql' ? 'MySQL' : 'Supabase account'}
- ${config.features.stripe ? 'Stripe account' : ''}

### Installation

1. **Clone and install dependencies**
   \`\`\`bash
   cd ${config.name}
   npm install
   \`\`\`

2. **Environment setup**
   \`\`\`bash
   cp .env.example .env
   \`\`\`
   
   Configure your environment variables in \`.env\`:`;

  if (config.database !== 'supabase') {
    readme += `
   - \`DATABASE_URL\`: Your database connection string`;
  }

  readme += `
   - \`AUTH_SECRET\`: Random string for JWT signing`;

  if (config.features.stripe) {
    readme += `
   - \`STRIPE_PUBLISHABLE_KEY\` & \`STRIPE_SECRET_KEY\`: From your Stripe dashboard`;
  }

  if (config.database === 'supabase' || config.auth === 'supabase') {
    readme += `
   - \`NEXT_PUBLIC_SUPABASE_URL\` & \`NEXT_PUBLIC_SUPABASE_ANON_KEY\`: From your Supabase project`;
  }

  readme += `

3. **Database setup**
   \`\`\`bash
   npx prisma migrate dev --name init
   npx prisma generate
   \`\`\`

4. **Run the development server**
   \`\`\`bash
   npm run dev
   \`\`\`

   Open [http://localhost:3000](http://localhost:3000) in your browser.

## 📖 Documentation

### Project Structure

\`\`\`
src/
├── app/[locale]/          # Next.js App Router with i18n
├── components/            # React components
│   ├── ui/               # Base UI components
│   ├── forms/            # Form components
│   └── layout/           # Layout components
├── lib/                  # Utility functions
└── types/                # TypeScript type definitions

prisma/
├── schema.prisma         # Database schema
└── migrations/           # Database migrations

messages/                 # Internationalization files
├── en.json
└── fr.json
\`\`\`

### Key Commands

\`\`\`bash
# Development
npm run dev              # Start development server
npm run build           # Build for production
npm run start           # Start production server

# Database
npx prisma studio       # Open database admin UI
npx prisma migrate dev  # Apply database migrations
npx prisma generate     # Generate Prisma client

# Testing  
npm run test           # Run unit tests
npm run test:e2e       # Run E2E tests

# Linting
npm run lint           # Run ESLint
\`\`\`

`;

  // Add feature-specific documentation
  if (config.features.stripe) {
    readme += `### 💳 Stripe Setup

1. **Create products in your Stripe Dashboard**:
   - Pro Plan: \`price_...\`
   - Enterprise Plan: \`price_...\`

2. **Configure webhooks**:
   - Endpoint: \`https://yourdomain.com/api/webhooks/stripe\`
   - Events: \`customer.subscription.created\`, \`customer.subscription.updated\`, \`customer.subscription.deleted\`, \`invoice.payment_succeeded\`

3. **Update environment variables**:
   \`\`\`bash
   STRIPE_PRICE_ID_PRO=price_...
   STRIPE_PRICE_ID_ENTERPRISE=price_...
   STRIPE_WEBHOOK_SECRET=whsec_...
   \`\`\`

`;
  }

  if (config.features.multiTenant) {
    readme += `### 🏢 Multi-Tenancy

This application supports multi-tenant architecture with:

- **Organizations**: Top-level tenant isolation
- **Teams**: Sub-groups within organizations  
- **Roles**: OWNER, ADMIN, MEMBER, VIEWER
- **Data Isolation**: All data is scoped to organizations

#### Creating an Organization

Users can create organizations from the dashboard. The creator automatically becomes the OWNER.

#### Inviting Members

Organization owners and admins can invite new members via email.

`;
  }

  readme += `## 🚀 Deployment

### Vercel (Recommended)

1. **Connect your repository** to [Vercel](https://vercel.com)

2. **Configure environment variables** in your Vercel dashboard

3. **Deploy**: Vercel will automatically deploy on every push to main

### Docker

1. **Build the image**:
   \`\`\`bash
   docker build -t ${config.name} .
   \`\`\`

2. **Run the container**:
   \`\`\`bash
   docker run -p 3000:3000 --env-file .env ${config.name}
   \`\`\`

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch: \`git checkout -b feature/amazing-feature\`
3. Commit your changes: \`git commit -m 'Add amazing feature'\`
4. Push to the branch: \`git push origin feature/amazing-feature\`
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- Built with [create-saas-app](https://github.com/your-org/create-saas-app)
- Powered by [Next.js](https://nextjs.org/)
- UI components from [shadcn/ui](https://ui.shadcn.com/)
- Database management with [Prisma](https://prisma.io/)

---

Built with ❤️ using create-saas-app
`;

  return readme;
}