# Base image with Node.js
FROM node:20-alpine AS base

# Installer pnpm globalement
RUN npm install -g pnpm

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copier package.json et pnpm-lock.yaml
COPY package.json ./
COPY pnpm-lock.yaml ./

# Installer les dépendances (y compris devDependencies pour le build)
RUN pnpm install

# Build application
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Set SITE_URL for sitemap generation (sera passé comme build-arg)
ARG SITE_URL
ENV SITE_URL=${SITE_URL}
ENV NODE_ENV=production

# Build
RUN NEXT_TELEMETRY_DISABLED=1 pnpm run build

# Production image
FROM base AS runner
WORKDIR /app

ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Créer les répertoires nécessaires avec les bonnes permissions
# L'utilisateur "node" existe déjà dans l'image de base node:alpine
RUN mkdir -p /app/.next/cache /app/public && \
    chown -R node:node /app

# Copier les fichiers nécessaires depuis le builder avec les bonnes permissions
COPY --from=builder --chown=node:node /app/package.json ./package.json
COPY --from=builder --chown=node:node /app/public ./public
# Copier le contenu du dossier standalone directement dans /app
COPY --from=builder --chown=node:node /app/.next/standalone/./ .
COPY --from=builder --chown=node:node /app/.next/static ./.next/static
COPY --from=builder --chown=node:node /app/prisma ./prisma
COPY --chown=node:node scripts/start.sh /app/start.sh

# Définir des permissions plus restrictives
RUN chmod 755 /app && \
    chmod 644 package.json && \
    chmod -R 755 public .next prisma && \
    chmod 755 /app/start.sh

USER node

EXPOSE 3000
ENV PORT=3000

CMD ["/app/start.sh"]